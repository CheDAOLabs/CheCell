import { Coord } from "./types";
export declare function subtract(from: CoordMap<boolean>, subtract: CoordMap<boolean>): CoordMap<boolean>;
export declare function coordToKey(coord: Coord): number;
export declare function keyToCoord(key: number): Coord;
export declare class CoordMap<T> {
    map: Map<number, T>;
    defaultValue?: T;
    constructor(props?: {
        defaultValue?: T;
    });
    static from<T>(coordMapLike: {
        map: Map<number, T>;
        defaultValue?: T;
    }): CoordMap<T>;
    set(coord: Coord, value: T): Map<number, T>;
    get(coord: Coord): T | undefined;
    keys(): IterableIterator<number>;
    coords(): IterableIterator<Coord>;
    entries(): IterableIterator<[number, T]>;
    toArray(): [Coord, T][];
    values(): IterableIterator<T>;
    delete(coord: Coord): boolean;
    has(coord: Coord): boolean;
    clear(): void;
    get size(): number;
}

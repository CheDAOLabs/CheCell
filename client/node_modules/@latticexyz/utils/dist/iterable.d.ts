export declare function makeIterable<T>(iterator: Iterator<T>): IterableIterator<T>;
export declare function concatIterators<T>(first: Iterator<T>, second?: Iterator<T>): IterableIterator<T>;
export declare function mergeIterators<A, B>(iteratorA: Iterator<A>, iteratorB: Iterator<B>): IterableIterator<[A, B]>;
export declare function transformIterator<A, B>(iterator: Iterator<A>, transform: (value: A) => B): IterableIterator<B>;
/**
 * Turns an array into an iterator. NOTE: an iterator can only be iterated once.
 * @param array Array to be turned into an iterator
 * @returns Iterator to iterate through the array
 */
export declare function arrayToIterator<T>(array: T[]): IterableIterator<T>;

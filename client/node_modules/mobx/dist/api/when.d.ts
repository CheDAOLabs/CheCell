import { IReactionDisposer, Lambda } from "../internal";
interface GenericAbortSignal {
    readonly aborted: boolean;
    onabort?: ((...args: any) => any) | null;
    addEventListener?: (...args: any) => any;
    removeEventListener?: (...args: any) => any;
}
export interface IWhenOptions {
    name?: string;
    timeout?: number;
    onError?: (error: any) => void;
    signal?: GenericAbortSignal;
}
export declare function when(predicate: () => boolean, opts?: IWhenOptions): Promise<void> & {
    cancel(): void;
};
export declare function when(predicate: () => boolean, effect: Lambda, opts?: IWhenOptions): IReactionDisposer;
export {};

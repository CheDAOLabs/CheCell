import { Account, AccountInterface, ProviderInterface, Signature, SignerInterface, typedData } from "starknet";
import { Sender } from "./messages/exchange/bidirectional";
import { StarknetMethods } from "./types";
declare class UnimplementedSigner implements SignerInterface {
    getPubKey(): Promise<string>;
    signMessage(): Promise<Signature>;
    signTransaction(): Promise<Signature>;
    signDeclareTransaction(): Promise<Signature>;
    signDeployAccountTransaction(): Promise<Signature>;
}
export declare class MessageAccount extends Account implements AccountInterface {
    address: string;
    private readonly remoteHandle;
    signer: UnimplementedSigner;
    constructor(provider: ProviderInterface, address: string, remoteHandle: Sender<StarknetMethods>);
    execute: StarknetMethods["execute"];
    signMessage(typedData: typedData.TypedData): Promise<Signature>;
}
export {};

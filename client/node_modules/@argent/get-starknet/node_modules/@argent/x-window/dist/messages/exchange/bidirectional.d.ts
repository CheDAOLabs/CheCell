import { Messenger } from "../messenger";
type AllowPromise<T> = T | Promise<T>;
type InferPromise<T> = T extends Promise<infer U> ? U : T;
type WrapPromise<T> = T extends Promise<infer U> ? Promise<U> : Promise<T>;
export interface Methods {
    [key: string]: (...args: any) => AllowPromise<any>;
}
export type MethodsToImplementations<T extends Methods> = {
    [K in keyof T]: (origin: string) => (...args: Parameters<T[K]>) => WrapPromise<ReturnType<T[K]>>;
};
export declare class Sender<RemoteMethods extends Methods> {
    private readonly postMessenger;
    private readonly listenMessenger;
    readonly id: string;
    private readonly pendingRequests;
    constructor(postMessenger: Messenger, listenMessenger?: Messenger);
    call: <K extends keyof RemoteMethods, Args extends Parameters<RemoteMethods[K]>, Result extends InferPromise<ReturnType<RemoteMethods[K]>>>(method: K, ...args: Args) => Promise<Result>;
    private handleMessage;
}
export declare class Receiver<LocalMethods extends Methods> {
    private readonly listenMessenger;
    private readonly localMethods;
    private readonly postMessenger;
    readonly id: string;
    constructor(listenMessenger: Messenger, localMethods: MethodsToImplementations<LocalMethods>, postMessenger?: Messenger);
    destroy: () => void;
    private handleMessage;
}
export {};

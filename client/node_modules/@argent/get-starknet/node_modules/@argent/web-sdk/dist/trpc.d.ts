declare const appRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
    ctx: object;
    meta: object;
    errorShape: never;
    transformer: import("@trpc/server").DefaultDataTransformer;
}>, {
    authorize: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: boolean;
        _output_out: boolean;
    }, unknown>;
    connect: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
        _meta: object;
    }, string>;
    enable: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: string;
        _output_out: string;
    }, unknown>;
    execute: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: object;
        _input_in: [{
            contractAddress: string;
            entrypoint: string;
            calldata?: (string | number | bigint)[];
        } | [{
            contractAddress: string;
            entrypoint: string;
            calldata?: (string | number | bigint)[];
        }, ...{
            contractAddress: string;
            entrypoint: string;
            calldata?: (string | number | bigint)[];
        }[]], any[], {
            nonce?: string | number | bigint;
            maxFee?: string | number | bigint;
            version?: string | number | bigint;
        }, ...unknown[]];
        _input_out: [{
            contractAddress: string;
            entrypoint: string;
            calldata?: (string | number | bigint)[];
        } | [{
            contractAddress: string;
            entrypoint: string;
            calldata?: (string | number | bigint)[];
        }, ...{
            contractAddress: string;
            entrypoint: string;
            calldata?: (string | number | bigint)[];
        }[]], any[], {
            nonce?: string | number | bigint;
            maxFee?: string | number | bigint;
            version?: string | number | bigint;
        }, ...unknown[]];
        _output_in: string;
        _output_out: string;
    }, unknown>;
    signMessage: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: object;
        _input_in: [{
            message: Record<string, unknown>;
            types: Record<string, ({
                type: string;
                name: string;
            } | {
                type: "merkletree";
                name: string;
                contains: string;
            })[]>;
            primaryType: string;
            domain: Record<string, unknown>;
        }, ...unknown[]];
        _input_out: [{
            message: Record<string, unknown>;
            types: Record<string, ({
                type: string;
                name: string;
            } | {
                type: "merkletree";
                name: string;
                contains: string;
            })[]>;
            primaryType: string;
            domain: Record<string, unknown>;
        }, ...unknown[]];
        _output_in: string[];
        _output_out: string[];
    }, unknown>;
    getLoginStatus: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
        _meta: object;
    }, void>;
    addStarknetChain: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
        _meta: object;
    }, never>;
    switchStarknetChain: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
        _meta: object;
    }, never>;
    watchAsset: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
        _meta: object;
    }, never>;
    updateModal: import("@trpc/server").BuildProcedure<"subscription", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
        _meta: object;
    }, void>;
}>;
export type AppRouter = typeof appRouter;
type TRPCProxyClientOptions = {
    origin: string;
    iframe?: Window;
};
export declare const trpcProxyClient: ({ iframe, origin }: TRPCProxyClientOptions) => {
    authorize: {
        mutate: (input?: void, opts?: import("@trpc/server").ProcedureOptions) => Promise<boolean>;
    };
    connect: {
        mutate: (input?: void, opts?: import("@trpc/server").ProcedureOptions) => Promise<string>;
    };
    enable: {
        mutate: (input?: void, opts?: import("@trpc/server").ProcedureOptions) => Promise<string>;
    };
    execute: {
        mutate: (input?: void | [{
            contractAddress: string;
            entrypoint: string;
            calldata?: (string | number | bigint)[];
        } | [{
            contractAddress: string;
            entrypoint: string;
            calldata?: (string | number | bigint)[];
        }, ...{
            contractAddress: string;
            entrypoint: string;
            calldata?: (string | number | bigint)[];
        }[]], any[], {
            nonce?: string | number | bigint;
            maxFee?: string | number | bigint;
            version?: string | number | bigint;
        }, ...unknown[]], opts?: import("@trpc/server").ProcedureOptions) => Promise<string>;
    };
    signMessage: {
        mutate: (input?: void | [{
            message: Record<string, unknown>;
            types: Record<string, ({
                type: string;
                name: string;
            } | {
                type: "merkletree";
                name: string;
                contains: string;
            })[]>;
            primaryType: string;
            domain: Record<string, unknown>;
        }, ...unknown[]], opts?: import("@trpc/server").ProcedureOptions) => Promise<string[]>;
    };
    getLoginStatus: {
        mutate: (input?: void, opts?: import("@trpc/server").ProcedureOptions) => Promise<never>;
    };
    addStarknetChain: {
        mutate: (input?: void, opts?: import("@trpc/server").ProcedureOptions) => Promise<never>;
    };
    switchStarknetChain: {
        mutate: (input?: void, opts?: import("@trpc/server").ProcedureOptions) => Promise<never>;
    };
    watchAsset: {
        mutate: (input?: void, opts?: import("@trpc/server").ProcedureOptions) => Promise<never>;
    };
    updateModal: {
        subscribe: (input: void, opts: import("@trpc/server").ProcedureOptions & Partial<import("@trpc/client/dist/internals/TRPCUntypedClient").TRPCSubscriptionObserver<never, import("@trpc/client").TRPCClientError<import("@trpc/server").BuildProcedure<"subscription", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: never;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, void>>>>) => import("@trpc/server/observable").Unsubscribable;
    };
};
export {};

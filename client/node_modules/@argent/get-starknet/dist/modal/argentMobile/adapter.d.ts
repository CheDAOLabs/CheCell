/// <reference types="node" />
import { EventEmitter } from "events";
import type { JsonRpcProvider } from "@walletconnect/jsonrpc-provider";
import type SignClient from "@walletconnect/sign-client";
import { SignerConnection } from "@walletconnect/signer-connection";
import type { SignerConnectionClientOpts } from "@walletconnect/signer-connection";
import type { ProposalTypes, SessionTypes } from "@walletconnect/types";
import type { EthereumRpcConfig } from "./starknet/starknetAdapter";
export interface NamespaceAdapterOptions {
    client: SignClient;
    chainId?: string | number;
    rpcUrl?: string;
}
export declare abstract class NamespaceAdapter {
    abstract namespace: string;
    abstract chainId: number | string;
    abstract methods: string[];
    abstract events: string[];
    abstract session?: SessionTypes.Struct;
    abstract signerConnection: SignerConnection;
    abstract rpc: EthereumRpcConfig;
    protected abstract rpcProvider: JsonRpcProvider;
    protected abstract parseChainId(chainId: string): number | string;
    protected abstract formatChainId(chainId: string | number): string;
    protected abstract setAccounts(accounts: string[]): void;
    protected accounts: string[];
    protected eventEmitter: EventEmitter;
    updateSession: (session: SessionTypes.Struct) => void;
    isValidSession: ({ namespaces, requiredNamespaces, }: SessionTypes.Struct) => boolean;
    getRequiredNamespaces(): ProposalTypes.RequiredNamespaces;
    protected isCompatibleChainId(chainId: string): boolean;
    protected setChainIds(chains: string[]): void;
    protected setChainId(chain: string): void;
    protected parseAccountId(account: string): {
        chainId: string;
        address: string;
    };
    protected getSignerConnection(client?: SignerConnectionClientOpts): SignerConnection;
    protected registerEventListeners(): void;
}

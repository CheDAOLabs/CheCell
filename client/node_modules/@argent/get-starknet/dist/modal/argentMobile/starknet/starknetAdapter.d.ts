import { JsonRpcProvider } from "@walletconnect/jsonrpc-provider";
import type SignClient from "@walletconnect/sign-client";
import type { SignerConnection } from "@walletconnect/signer-connection";
import type { SessionTypes } from "@walletconnect/types";
import type { ConnectedStarknetWindowObject, RpcMessage } from "get-starknet-core";
import type { AccountInterface, ProviderInterface, SignerInterface } from "starknet";
import { NamespaceAdapter } from "../adapter";
import type { NamespaceAdapterOptions } from "../adapter";
export interface EthereumRpcConfig {
    chains: string[];
    methods: string[];
    events: string[];
}
export declare const serializeStarknetChainId: (chainId: string) => string;
export declare const deserializeStarknetChainId: (chainId: string) => string;
export declare class StarknetAdapter extends NamespaceAdapter implements ConnectedStarknetWindowObject {
    id: string;
    name: string;
    version: string;
    icon: string;
    provider: ProviderInterface;
    signer: undefined;
    account: AccountInterface;
    selectedAddress: string;
    namespace: string;
    methods: string[];
    events: string[];
    remoteSigner: SignerInterface;
    signerConnection: SignerConnection;
    rpcProvider: JsonRpcProvider;
    chainId: string;
    client: SignClient;
    session?: SessionTypes.Struct;
    rpc: EthereumRpcConfig;
    private walletRpc;
    constructor({ client, chainId, rpcUrl }: NamespaceAdapterOptions);
    getNetworkName(chainId: string): "goerli-alpha" | "goerli-alpha-2" | "mainnet-alpha";
    request<T extends RpcMessage>(_call: Omit<T, "result">): Promise<T["result"]>;
    enable(): Promise<string[]>;
    get isConnected(): boolean;
    isPreauthorized(): Promise<boolean>;
    on: ConnectedStarknetWindowObject["on"];
    off: ConnectedStarknetWindowObject["off"];
    private requestWallet;
    get isConnecting(): boolean;
    disable(): Promise<void>;
    get isWalletConnect(): boolean;
    protected registerEventListeners(): void;
    protected formatChainId(chainId: string): string;
    protected parseChainId(chainId: string): string;
    protected setAccounts(accounts: string[]): void;
}
